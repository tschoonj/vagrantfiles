- hosts: all
  vars:
    - mm_common_version: 0.9.12
  handlers:
  tasks:
    - name: Install growpart
      yum:
        name: cloud-utils-growpart
        state: latest
    - name: Grow /dev/sda1
      command: growpart /dev/sda 1
      ignore_errors: yes
      register: growpart
    - name: Resize /dev/sda1
      command: xfs_growfs /
      when: growpart.rc == 0
    - name: Install python-dnf
      yum:
        name: python3-dnf
        state: latest
    - name: Enable PowerTools
      command: "yum config-manager --set-enabled PowerTools"
    - name: Ensure vagrant user bashrc has some environment vars
      blockinfile:
        dest: "/home/vagrant/.bashrc"
        block: |
          export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
          export LD_LIBRARY_PATH=/usr/local/lib
          export GI_TYPELIB_PATH=/usr/local/lib/girepository-1.0
        marker: '# {mark} ANSIBLE MANAGED BLOCK - XMI-MSIM'
        create: yes
      become_user: vagrant
    - name: Install EPEL
      yum:
        name: epel-release
        state: latest
    - name: Update all
      dnf:
        name: "*"
        state: latest
    - name: Add lvserver RPM repo
      dnf:
        name: http://lvserver.ugent.be/yum/xmi-repo-key-8.0-1.el8.noarch.rpm
        state: present
    - name: Install some essential tools
      dnf:
        name:
          - vim
          - singularity
          - wget
        state: latest
    - name: Install the Development tools
      dnf:
        name: "@Development tools"
        state: present
    - name: Configure git
      git_config:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        scope: global
      vars:
        input:
          user.email: 'Tom.Schoonjans@rfi.ac.uk'
          user.name: 'Tom Schoonjans'
          core.editor: 'vim'
          color.ui: 'always'
      become_user: vagrant
      loop: "{{ input | dict2items }}"
    - name: Generate SSH keypair
      openssh_keypair:
        path: '~/.ssh/id_rsa'
        type: rsa
      become_user: vagrant
    - name: Read SSH public key
      shell: cat ~/.ssh/id_rsa.pub
      register: ssh_pub_key
      become_user: vagrant
    - name: Upload to GitHub
      local_action:
        module: github_key
        name: "{{ lookup('pipe','hostname') }}-centos8"
        force: yes
        token: "{{ lookup('env','VAGRANT_GITHUB_API_SSH_TOKEN') }}"
        pubkey: '{{ ssh_pub_key.stdout }}'
      become: no
      register: github_key_upload
    - name: sleep 5 seconds
      pause:
        seconds: 5
      when: github_key_upload.changed
    - name: Clone singularity-packaging-scripts git repository
      git:
        repo: 'git@github.com:tschoonj/singularity-packaging-scripts.git'
        dest: github/singularity-packaging-scripts
        accept_hostkey: yes
      become: no
    - name: Clone liquidprompt
      git:
        repo: 'https://github.com/nojhan/liquidprompt.git'
        dest: github/liquidprompt
        accept_hostkey: yes
      become: no
    - name: Ensure vagrant user bashrc activates liquidprompt
      blockinfile:
        dest: "/home/vagrant/.bashrc"
        block: |
          [[ $- = *i* ]] && source ~/github/liquidprompt/liquidprompt
        marker: '# {mark} ANSIBLE MANAGED BLOCK - LIQUIDPROMPT'
        create: yes
      become_user: vagrant
    - name: Install pip3
      yum:
        name: python3-pip
        state: latest
    - name: Install github3 python package
      pip:
        name: github3.py
    - name: Create Downloads directory
      file:
        path: /home/vagrant/Downloads
        state: directory
      become_user: vagrant
    - name: Look for latest release of hub
      github_release:
        user: github
        repo: hub
        action: latest_release
      register: hub_latest_release
    - name: Download latest release of hub
      get_url:
        url: "https://github.com/github/hub/releases/download/{{ hub_latest_release.tag}}/hub-linux-amd64-{{ hub_latest_release.tag[1:]}}.tgz"
        dest: "/home/vagrant/Downloads"
      become_user: vagrant
      register: hub_downloaded
    - name: Extract
      unarchive:
        src: "/home/vagrant/Downloads/hub-linux-amd64-{{ hub_latest_release.tag[1:]}}.tgz"
        dest: /usr/local/bin
        extra_opts:
          - --strip=2
          - '*/bin/hub'
        remote_src: true
      when: hub_downloaded.changed
#    - name: Install GNOME...
#      dnf:
#        name: "@GNOME"
#        state: latest
#    - name: Get default runlevel
#      command: systemctl get-default
#      register: runlevel
#    - name: Set graphical runlevel
#      command: systemctl set-default graphical.target
#      when: runlevel.stdout != "graphical.target"
#    - name: Switch to X from Wayland
#      ini_file:
#        path: /etc/gdm/custom.conf
#        section: daemon
#        option: "{{ item.option }}"
#        value: "{{ item.value }}"
#      loop:
#        - { option: WaylandEnable, value: 'false' }
#        - { option: DefaultSession, value: gnome-xorg.desktop }
#    - name: Install XMI-MSIM dependencies
#      yum:
#        name:
#          - hdf5-devel
#          - libsoup-devel
#          - easyRNG-devel
#          - libxslt-devel
#          - libpeas-devel
#          - libpeas-loader-python
#          - gcc-gfortran
#        state: latest
#    - name: Install xraylib dependencies
#      yum:
#        name:
#          - swig
#          - python3-Cython 
#          - python3-numpy
#          - python3-devel
#          - python3-setuptools
#          - autoconf
#          - automake
#          - libtool
#          - xorg-x11-xauth
#    - name: Clone xraylib git repository
#      git:
#        repo: 'https://github.com/tschoonj/xraylib.git'
#        dest: xraylib
#        depth: 1
#      become: no
#      register: xraylib_git_changed
#    - name: Update/Install xraylib
#      block:
#      - name: Compile xraylib
#        shell: 'autoreconf -fi && ./configure --enable-fortran2003 --enable-python --enable-python-numpy PYTHON=python3.6 CYTHON=cython && make clean && make'
#        args:
#          chdir: xraylib
#        become: no
#      - name: Install xraylib
#        shell: 'make install'
#        args:
#          chdir: xraylib
#      when: xraylib_git_changed.changed
#    - name: Install gtkmm-plplot dependencies
#      yum:
#        name:
#          - autoconf
#          - automake
#          - libtool
#          - plplot-devel
#          - gtkmm30-devel
#    - name: Check if mm-common is installed
#      stat:
#        path: '/usr/bin/mm-common-prepare'
#      register: mm_common_get
#    - name: Install mm-common
#      block:
#        - name: Download mm-common source
#          get_url:
#            url: 'https://download.gnome.org/sources/mm-common/0.9/mm-common-{{ mm_common_version }}.tar.xz'
#            dest: /home/vagrant
#          become: no
#        - name: Untar mm-common
#          unarchive:
#            remote_src: yes
#            src: 'mm-common-{{ mm_common_version }}.tar.xz'
#            dest: /home/vagrant
#          become: no
#        - name: Compile mm-common
#          shell: './configure --prefix=/usr && make'
#          args:
#            chdir: 'mm-common-{{ mm_common_version }}'
#          become: no
#        - name: Install mm-common
#          shell: 'make install'
#          args:
#            chdir: 'mm-common-{{ mm_common_version }}'
#      when: mm_common_get.stat.exists == False
#    - name: Clone gtkmm-plplot git repository
#      git:
#        repo: 'https://github.com/tschoonj/gtkmm-plplot.git'
#        dest: gtkmm-plplot
#        depth: 1
#      become: no
#      register: gtkmm_plplot_git_changed
#    - name: Update/Install gtkmm-plplot
#      block:
#      - name: Compile gtkmm-plplot
#        shell: 'autoreconf -fi && ./configure && make clean && make'
#        args:
#          chdir: gtkmm-plplot
#        become: no
#      - name: Install gtkmm-plplot
#        shell: 'make install'
#        args:
#          chdir: gtkmm-plplot
#      when: gtkmm_plplot_git_changed.changed
#    - name: Clone XMI-MSIM git repository
#      git:
#        repo: 'https://github.com/tschoonj/xmimsim.git'
#        dest: xmimsim
#      become: no
  become: yes
